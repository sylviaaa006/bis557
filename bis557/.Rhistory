test <- sample.int(nrow(iris), 0.2*nrow(iris))
train <- setdiff(seq_len(nrow(iris)), test)
folds <- vfold_cv(iris[sample.int(nrow(iris), nrow(iris)),], 10)
rmses <- foreach(lambda = lambdas, .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$Sepal.Length,
predict(ridge_regression(Sepal.Length ~., training(folds$splits[[i]]),
lambda = lambda),
testing(folds$splits[[i]])))
}
}
edf <- tibble(mean = apply(rmses, 1, mean),
sd = apply(rmses, 1, sd),
lambda = lambdas)
edf
bestlam2 <- edf$lambda[which.min(edf$mean)]
bestlam2
bestlambda <- function(form, data, lambdas) {
test <- sample.int(nrow(data), 0.2*nrow(data))
train <- setdiff(seq_len(nrow(data)), test)
folds <- vfold_cv(data[sample.int(nrow(data), nrow(data)),], 10)
rmses <- foreach(lambda = lambdas, .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$data[[as.character(form)[2]]],
predict(ridge_regression(form, training(folds$splits[[i]]),
lambda = lambda),
testing(folds$splits[[i]])))
}
}
edf <- tibble(mean = apply(rmses, 1, mean),
sd = apply(rmses, 1, sd),
lambda = lambdas)
edf
}
bestlambda(Sepal.Length ~., iris, seq(0,1, 0.1))
iris[[as.character(form)[Sepal.Length ~.]]]
iris[[as.character(Sepal.Length ~.)[2]]]
folds <- vfold_cv(iris[sample.int(nrow(iris), nrow(iris)),], 10)
rmses <- foreach(lambda = lambdas, .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$iris[[as.character(Sepal.Length ~.)[2]]],
predict(ridge_regression(Sepal.Length ~., training(folds$splits[[i]]),
lambda = lambda),
testing(folds$splits[[i]])))
}
}
edf <- tibble(mean = apply(rmses, 1, mean),
sd = apply(rmses, 1, sd),
lambda = lambdas)
edf
rmses <- foreach(lambda = lambdas, .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$(iris[[as.character(Sepal.Length ~.)[2]]]),
folds <- vfold_cv(iris[sample.int(nrow(iris), nrow(iris)),], 10)
rmses <- foreach(lambda = lambdas, .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$[as.character(Sepal.Length ~.)[2]],
folds <- vfold_cv(iris[sample.int(nrow(iris), nrow(iris)),], 10)
rmses <- foreach(lambda = lambdas, .combine = rbind) %dopar% {
foreach(i = seq_len(nrow(folds)), .combine = c) %do% {
casl_util_rmse(testing(folds$splits[[i]])$as.character(Sepal.Length ~.)[2],
predict(ridge_regression(Sepal.Length ~., training(folds$splits[[i]]),
lambda = lambda),
testing(folds$splits[[i]])))
}
}
as.character(Sepal.Length ~.)[2]
library(usethis)
usethis::use_vignette('my-vignette')
set.seed(123)
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
alpha <- 0.001
X[,1] <- X[,1] * alpha + X[,2] * (1 - alpha)
#original stability
svals <- svd(t(X)%*%X)$d
max(svals) / min(svals)
# original l2 error
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve(crossprod(X), crossprod(X, y))
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
#ridge stability
svals2 <- svd(t(X) %*% X+0.5*diag(p))$d
max(svals2) / min(svals2)
# ridge l2 error
N <- 1e4; ridge_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve( crossprod(X) + diag(rep(0.5, ncol(X))) ) %*% t(X) %*% y
ridge_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(ridge_errors)
set.seed(123)
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
alpha <- 0.001
X[,1] <- X[,1] * alpha + X[,2] * (1 - alpha)
#original stability
svals <- svd(X)$d
max(svals) / min(svals)
# original l2 error
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve(crossprod(X), crossprod(X, y))
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
#ridge stability
svals2 <- sqrt(svd(t(X) %*% X+0.5*diag(p))$d)
max(svals2) / min(svals2)
# ridge l2 error
N <- 1e4; ridge_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve( crossprod(X) + diag(rep(0.5, ncol(X))) ) %*% t(X) %*% y
ridge_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(ridge_errors)
ave.error <- c()
lambdas <- seq(0,1, by=0.01)
ave.error <- c()
for (i in 1:length(lambdas)) {
cv5 <- sapply(folds, function(a) {
train.fold <- iris[-a,]
test.fold <- iris[a,]
ridge <- ridge_regression1(Sepal.Length ~., data=train.fold, lambda = lambdas[i])
cv.pred <- test.fold %*% ridge
cv.error <- mean((cv.pred-test.fold$SalePrice)^2)
return(cv.error)
})
ave.error[i] <- mean(cv5)
}
folds <- createFolds(iris$Sepal.Length, k=5)
lambdas <- seq(0,1, by=0.01)
ave.error <- c()
for (i in 1:length(lambdas)) {
cv5 <- sapply(folds, function(a) {
train.fold <- iris[-a,]
test.fold <- iris[a,]
ridge <- ridge_regression1(Sepal.Length ~., data=train.fold, lambda = lambdas[i])
cv.pred <- test.fold %*% ridge
cv.error <- mean((cv.pred-test.fold$SalePrice)^2)
return(cv.error)
})
ave.error[i] <- mean(cv5)
}
fit_ridge1 <- ridge_regression1(Sepal.Length ~ ., iris)
class(fit_ridge1)
dim(fit_ridge1)
#' @param data the dataframe that will be used to caluculate coefficients
#' @param lambda A user supplied lambda sequence. Typical usage is to have the program compute its own lambda sequence based on nlambda and lambda.min.ratio.
#' @return beta: ridge regression coefficients
#'
#' @examples
#' ridge_regression1(Sepal.Length ~., iris, lambda=10)
#' bestlambda(Sepal.Length ~., iris, seq(0,1, by=0.01))
#'@import glmnet
#'@export
#'
ridge_regression1 <- function(form, data, lambda = 10) {
X <- model.matrix(form, data)[,-1]
Y <- as.matrix(data[[as.character(form)[2]]])
sd_y <- sqrt(var(Y)*(nrow(X)-1)/nrow(X))[1,1]
ret <- solve( crossprod(X) + diag(rep(lambda*nrow(X)/sd_y, ncol(X))) ) %*% t(X) %*% Y #crossprod is equal to t(x) %*% y
attributes(ret)$formula <- form
class(ret) <- c(class(ret), "ridge_regression")
ret <- rbind(0,ret)
ret
}
fit_ridge1 <- ridge_regression1(Sepal.Length ~ ., iris)
fit_glmnet <- glmnet(model.matrix(Sepal.Length ~ ., iris)[,-1],data.matrix(iris[[as.character(Sepal.Length ~ .)[2]]]), alpha=0, lambda = 10, standardize = FALSE, intercept = FALSE,thresh = 1e-20)
beta2 <- data.matrix(as.vector(coef(fit_glmnet, exact = TRUE, x=model.matrix(Sepal.Length ~ ., iris)[,-1], y=data.matrix(iris[[as.character(Sepal.Length ~ .)[2]]]))))
expect_equivalent(fit_ridge1, beta2,
tolerance = 1e-5)
devtools::test()
set.seed(1)
folds <- createFolds(iris$Sepal.Length, k=5)
lambdas <- seq(0,1, by=0.01)
ave.error <- c()
for (i in 1:length(lambdas)) {
cv5 <- sapply(folds, function(a) {
train.fold <- iris[-a,]
test.fold <- iris[a,]
ridge <- ridge_regression1(Sepal.Length ~., data=train.fold, lambda = lambdas[i])
cv.pred <- test.fold %*% ridge
cv.error <- mean((cv.pred-test.fold$SalePrice)^2)
return(cv.error)
})
ave.error[i] <- mean(cv5)
}
set.seed(1)
folds <- createFolds(iris$Sepal.Length, k=5)
lambdas <- seq(0,1, by=0.01)
ave.error <- c()
for (i in 1:length(lambdas)) {
cv5 <- sapply(folds, function(a) {
train.fold <- iris[-a,]
test.fold <- iris[a,]
ridge <- ridge_regression1(Sepal.Length ~., data=train.fold, lambda = lambdas[i])
cv.pred <- as.matrix(test.fold) %*% ridge
cv.error <- mean((cv.pred-test.fold$SalePrice)^2)
return(cv.error)
})
ave.error[i] <- mean(cv5)
}
set.seed(1)
folds <- createFolds(iris$Sepal.Length, k=5)
lambdas <- seq(0,1, by=0.01)
ave.error <- c()
for (i in 1:length(lambdas)) {
cv5 <- sapply(folds, function(a) {
train.fold <- iris[-a,]
test.fold <- iris[a,]
ridge <- ridge_regression1(Sepal.Length ~., data=train.fold, lambda = lambdas[i])
cv.pred <- as.matrix(test.fold) %*% as.matrix(ridge)
cv.error <- mean((cv.pred-test.fold$SalePrice)^2)
return(cv.error)
})
ave.error[i] <- mean(cv5)
}
folds
folds[[1]]
train.fold <- iris[-folds[[1]]],]
train.fold <- iris[-folds[[1]],]
test.fold <- iris[-folds[[1]],]
train.fold <- iris[-folds[[1]],]
test.fold <- iris[folds[[1]],]
train.fold <- iris[-folds[[1]],]
test.fold <- iris[folds[[1]],]
ridge <- ridge_regression1(Sepal.Length ~., data=train.fold, lambda = 0.1)
cv.pred <- as.matrix(test.fold) %*% as.matrix(ridge)
as.matrix(test.fold)
model.matrix(test.fold)
model.matrix(Sepal.Length ~.,test.fold)
as.matrix(model.matrix(Sepal.Length ~.,test.fold))
cv.pred <- as.matrix(model.matrix(Sepal.Length ~.,test.fold)) %*% ridge
cv.error <- mean((cv.pred-test.fold$SalePrice)^2)
cv.error
cv.pred
cv.pred-test.fold$SalePrice
test.fold$SalePrice
cv.error <- mean((cv.pred-test.fold$Sepal.Length)^2)
cv.pred
cv.error
set.seed(1)
folds <- createFolds(iris$Sepal.Length, k=5)
lambdas <- seq(0,1, by=0.01)
ave.error <- c()
for (i in 1:length(lambdas)) {
cv5 <- sapply(folds, function(a) {
train.fold <- iris[-a,]
test.fold <- iris[a,]
ridge <- ridge_regression1(Sepal.Length ~., data=train.fold, lambda = 0.1)
cv.pred <- as.matrix(model.matrix(Sepal.Length ~.,test.fold)) %*% ridge
cv.error <- mean((cv.pred-test.fold$Sepal.Length)^2)
return(cv.error)
})
ave.error[i] <- mean(cv5)
}
ave.error
cv5 <- sapply(folds, function(a) {
train.fold <- iris[-a,]
test.fold <- iris[a,]
ridge <- ridge_regression1(Sepal.Length ~., data=train.fold, lambda = 0.1)
cv.pred <- as.matrix(model.matrix(Sepal.Length ~.,test.fold)) %*% ridge
cv.error <- mean((cv.pred-test.fold$Sepal.Length)^2)
return(cv.error)
})
cv5
set.seed(1)
folds <- createFolds(iris$Sepal.Length, k=5)
lambdas <- seq(0,1, by=0.01)
ave.error <- c()
for (i in 1:length(lambdas)) {
cv5 <- sapply(folds, function(a) {
train.fold <- iris[-a,]
test.fold <- iris[a,]
ridge <- ridge_regression1(Sepal.Length ~., data=train.fold, lambda = lambdas[i])
cv.pred <- as.matrix(model.matrix(Sepal.Length ~.,test.fold)) %*% ridge
cv.error <- mean((cv.pred-test.fold$Sepal.Length)^2)
return(cv.error)
})
ave.error[i] <- mean(cv5)
}
ave.error
error <- data.frame(lambdas,ave.error <- c())
error <- data.frame(lambdas,ave.error=NULL)
error <- data.frame(lambdas,ave.error=NA)
View(error)
View(error)
set.seed(1)
folds <- createFolds(iris$Sepal.Length, k=5)
lambdas <- seq(0,1, by=0.01)
error <- data.frame(lambdas,ave.error=NA)
for (i in 1:length(lambdas)) {
cv5 <- sapply(folds, function(a) {
train.fold <- iris[-a,]
test.fold <- iris[a,]
ridge <- ridge_regression1(Sepal.Length ~., data=train.fold, lambda = lambdas[i])
cv.pred <- as.matrix(model.matrix(Sepal.Length ~.,test.fold)) %*% ridge
cv.error <- mean((cv.pred-test.fold$Sepal.Length)^2)
return(cv.error)
})
error[i,2] <- mean(cv5)
}
error
bestlambda <- error$ave.error[which.min(error$lambdas)]
bestlambda
bestlambda <- error$lambdas[which.min(error$ave.error)]
bestlambda
library(bis557)
iris$iris[[as.character(Sepal.Length ~.)[2]]]
iris[[as.character(Sepal.Length ~.)[2]]]
iris$as.character(Sepal.Length ~.)[2]
as.character(Sepal.Length ~.)[2]
folds <- createFolds(iris[as.character(Sepal.Length ~.)[2]],k=5)
folds
class(iris[as.character(Sepal.Length ~.)[2]])
folds <- createFolds(iris[as.character(Sepal.Length ~.)[2]],k=5)
folds
class(iris$Sepal.Length)
folds <- createFolds(as.numereic(iris[as.character(Sepal.Length ~.)[2]]),k=5)
aaa <- iris[as.character(Sepal.Length ~.)[2]]
View(aaa)
View(aaa)
folds <- createFolds(as.vector(iris[as.character(Sepal.Length ~.)[2]]),k=5)
folds
as.vector(iris[as.character(Sepal.Length ~.)[2]])
as.numeric(as.vector(iris[as.character(Sepal.Length ~.)[2]]))
as.numeric(as.matrix(iris[as.character(Sepal.Length ~.)[2]]))
?createFolds
as.vector(as.matrix(iris[as.character(Sepal.Length ~.)[2]]))
as.vector(iris[as.character(Sepal.Length ~.)[2]])
folds <- createFolds(as.vector(iris[as.character(Sepal.Length ~.)[2]]),k=5)
folds
folds <- createFolds(iris$Sepal.Length ~.,k=5)
folds
error
cv.error
error
folds <- createFolds(iris$Sepal.Length, k=5)
folds
folds <- createFolds(iris$Sepal.Length,k=5)
folds
folds <- createFolds(as.vector(iris[as.character(Sepal.Length ~.)[2]]),k=5)
folds
iris[[as.character(Sepal.Length ~.)[2]]][as.numeric(rownames(model.matrix(Sepal.Length ~., iris)))]
folds <- createFolds(iris[[as.character(Sepal.Length ~.)[2]]][as.numeric(rownames(model.matrix(Sepal.Length ~., iris)))],k=5)
folds
test.fold[[as.character(form)[2]]]
cv.error <- mean((cv.pred-test.fold[[as.character(Sepal.Length ~.)[2]]])^2)
cv.error
mses <- function(form,data,lambda){
folds <- createFolds(data[[as.character(form)[2]]][as.numeric(rownames(model.matrix(form, data)))], k=5)
error <- data.frame(lambda,ave.error=NA)
for (i in 1:length(lambda)) {
cv5 <- sapply(folds, function(a) {
train.fold <- data[-a,]
test.fold <- data[a,]
ridge <- ridge_regression1(form, data=train.fold, lambda = lambda[i])
cv.pred <- as.matrix(model.matrix(form,test.fold)) %*% ridge
cv.error <- mean((cv.pred-test.fold[[as.character(form)[2]]])^2)
return(cv.error)
})
error[i,2] <- mean(cv5)
}
}
best.lambda <- function(form,data,lambda){
folds <- createFolds(data[[as.character(form)[2]]][as.numeric(rownames(model.matrix(form, data)))], k=5)
error <- data.frame(lambda,ave.error=NA)
for (i in 1:length(lambda)) {
cv5 <- sapply(folds, function(a) {
train.fold <- data[-a,]
test.fold <- data[a,]
ridge <- ridge_regression1(form, data=train.fold, lambda = lambda[i])
cv.pred <- as.matrix(model.matrix(form,test.fold)) %*% ridge
cv.error <- mean((cv.pred-test.fold[[as.character(form)[2]]])^2)
return(cv.error)
})
error[i,2] <- mean(cv5)
}
bestlambda <- error$lambdas[which.min(error$ave.error)]
return(bestlambda)
}
best.lambda(Sepal.Length, iris, seq(0,1,0.1))
best.lambda(Sepal.Length ~., iris, seq(0,1,0.1))
best.lambda <- function(form,data,lambda){
folds <- createFolds(data[[as.character(form)[2]]][as.numeric(rownames(model.matrix(form, data)))], k=5)
error <- data.frame(lambda,ave.error=NA)
for (i in 1:length(lambda)) {
cv5 <- sapply(folds, function(a) {
train.fold <- data[-a,]
test.fold <- data[a,]
ridge <- ridge_regression1(form, data=train.fold, lambda = lambda[i])
cv.pred <- as.matrix(model.matrix(form,test.fold)) %*% ridge
cv.error <- mean((cv.pred-test.fold[[as.character(form)[2]]])^2)
return(cv.error)
})
error[i,2] <- mean(cv5)
}
bestlambda <- error$lambda[which.min(error$ave.error)]
return(bestlambda)
}
best.lambda(Sepal.Length ~., iris, seq(0,1,0.1))
set.seed(1)
best.lambda <- function(form,data,lambda){
folds <- createFolds(data[[as.character(form)[2]]][as.numeric(rownames(model.matrix(form, data)))], k=5)
error <- data.frame(lambda,ave.error=NA)
for (i in 1:length(lambda)) {
cv5 <- sapply(folds, function(a) {
train.fold <- data[-a,]
test.fold <- data[a,]
ridge <- ridge_regression1(form, data=train.fold, lambda = lambda[i])
cv.pred <- as.matrix(model.matrix(form,test.fold)) %*% ridge
cv.error <- mean((cv.pred-test.fold[[as.character(form)[2]]])^2)
return(cv.error)
})
error[i,2] <- mean(cv5)
}
bestlambda <- error$lambda[which.min(error$ave.error)]
return(bestlambda)
}
best.lambda(Sepal.Length ~., iris, seq(0,1,0.01))
best.glmnet <- cv.glmnet(model.matrix(Sepal.Length ~ ., iris),iris$Sepal.Length, alpha=0, lambda = seq(0,1,0.01))
bestlam <- best.glmnet$lambda.min
bestlam
best.glmnet <- cv.glmnet(model.matrix(Sepal.Length ~ ., iris),iris$Sepal.Length, alpha=0, lambda = seq(0,1,0.01))
bestlam <- best.glmnet$lambda.min
bestlam
set.seed(1)
best.glmnet <- cv.glmnet(model.matrix(Sepal.Length ~ ., iris),iris$Sepal.Length, alpha=0, lambda = seq(0,1,0.01))
set.seed(1)
best.glmnet <- cv.glmnet(model.matrix(Sepal.Length ~ ., iris),iris$Sepal.Length, alpha=0, lambda = seq(0,1,0.01))
bestlam <- best.glmnet$lambda.min
bestlam
plot(best.glmnet$lambda.min,best.glmnet$cvm)
plot(best.glmnet$lambda,best.glmnet$cvm)
set.seed(1)
best.glmnet <- cv.glmnet(model.matrix(Sepal.Length ~ ., iris)[,-1],iris$Sepal.Length, alpha=0, lambda = seq(0,1,0.01))
bestlam <- best.glmnet$lambda.min
bestlam
plot(best.glmnet$lambda,best.glmnet$cvm)
best.glmnet <- cv.glmnet(model.matrix(Sepal.Length ~ ., iris)[,-1],iris$Sepal.Length, alpha=0, lambda = seq(0,1,0.01))
bestlam <- best.glmnet$lambda.1se
bestlam
set.seed(1)
best.glmnet <- cv.glmnet(model.matrix(Sepal.Length ~ ., iris)[,-1],iris$Sepal.Length, alpha=0, lambda = seq(0,1,0.01))
bestlam <- best.glmnet$lambda.1se
bestlam
plot(best.glmnet$lambda,best.glmnet$cvm)
devtools::test()
best.lambda(Sepal.Length ~., iris, seq(0,1,0.01))
best.lambda(Sepal.Length ~., iris, seq(0,1,0.01))
set.seed(1)
best.lambda <- function(form,data,lambda){
folds <- createFolds(data[[as.character(form)[2]]][as.numeric(rownames(model.matrix(form, data)))], k=5)
error <- data.frame(lambda,ave.error=NA)
for (i in 1:length(lambda)) {
cv5 <- sapply(folds, function(a) {
train.fold <- data[-a,]
test.fold <- data[a,]
ridge <- ridge_regression1(form, data=train.fold, lambda = lambda[i])
cv.pred <- as.matrix(model.matrix(form,test.fold)) %*% ridge
cv.error <- mean((cv.pred-test.fold[[as.character(form)[2]]])^2)
return(cv.error)
})
error[i,2] <- mean(cv5)
}
bestlambda <- error$lambda[which.min(error$ave.error)]
return(bestlambda)
}
best.lambda(Sepal.Length ~., iris, seq(0,1,0.01))
set.seed(1)
best.lambda(Sepal.Length ~., iris, seq(0,1,0.01))
set.seed(1)
best.lambda(Sepal.Length ~., iris, seq(0,1,0.01))
best.glmnet <- cv.glmnet(model.matrix(Sepal.Length ~ ., iris)[,-1],iris$Sepal.Length, alpha=0, lambda = seq(0,1,0.01))
bestlam <- best.glmnet$lambda.1se
expect_equivalent(best.lambda, bestlam,
tolerance = 1e-5)
bestlam
best.lambda
set.seed(1)
bestlam1<- best.lambda(Sepal.Length ~., iris, seq(0,1,0.01))
best.glmnet <- cv.glmnet(model.matrix(Sepal.Length ~ ., iris)[,-1],iris$Sepal.Length, alpha=0, lambda = seq(0,1,0.01))
bestlam2 <- best.glmnet$lambda.1se
expect_equivalent(bestlam1, bestlam2,
tolerance = 1e-5)
devtools::test()
devtools::check()
devtools::check()
devtools::check()
devtools::test()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::test()
